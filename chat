using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using OpenAI;

namespace YourNamespace.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class YourController : ControllerBase
    {
        private readonly IHttpContextAccessor _httpContextAccessor;

        public YourController(IHttpContextAccessor httpContextAccessor)
        {
            _httpContextAccessor = httpContextAccessor;
        }

        [HttpGet]
        public IActionResult Get()
        {
            var session = _httpContextAccessor.HttpContext.Session;

            // 检查会话中是否存在先前的 OpenAI 客户端对象
            if (session.TryGetValue("OpenAIClient", out byte[] clientBytes))
            {
                var openAIClient = OpenAIClient.FromJson(Encoding.UTF8.GetString(clientBytes));

                // 使用先前的 OpenAI 客户端对象进行操作
                // ...
            }
            else
            {
                return NotFound("No previous OpenAI client found.");
            }

            return Ok();
        }

        [HttpPost]
        public async Task<IActionResult> Post([FromBody] RequestModel model)
        {
            string apiKey = "YOUR_API_KEY";
            string endpoint = "https://api.openai.com";
            string prompt = model.Prompt;
            int maxTokens = 50;
            double temperature = 0.5;

            var generatedText = await GenerateText(apiKey, endpoint, prompt, maxTokens, temperature);

            // 将 OpenAI 客户端对象保存到会话中
            var openAIClient = new OpenAIClient(apiKey, endpoint);
            var clientBytes = Encoding.UTF8.GetBytes(openAIClient.ToJson());
            _httpContextAccessor.HttpContext.Session.Set("OpenAIClient", clientBytes);

            return Ok(generatedText);
        }

        private async Task<string> GenerateText(string apiKey, string endpoint, string prompt, int maxTokens, double temperature)
        {
            var openAIClient = new OpenAIClient(apiKey, endpoint);

            // 使用 OpenAI 客户端对象进行调用
            // ...

            return generatedText;
        }
    }

    public class RequestModel
    {
        public string Prompt { get; set; }
    }
}
